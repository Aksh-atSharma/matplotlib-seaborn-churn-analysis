# -*- coding: utf-8 -*-
"""Matplotlib-Seaborn-Churn Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1irLWHHf_mZ_xgwOq9ADRxjjZc27rS2EN

# **Matplotlib**
"""

#matplotlib - Matplotlib is a low level graph plotting library in python that serves
# as a visualization utility. Matplotlib was created by John D. Hunter.
# Matplotlib is open source and we can use it freely.
# a library in python used to visualise data using different graphs, plots to identify
# relations, analyse data and identify patterns visually

import matplotlib.pyplot as plt


# line plot - changes in values over time

x = [1,2,3,4]

y = [10,20,10,40]

plt.plot(x,y)

plt.show()

from ast import FunctionDef
from os import name
# Key Terms

# 1. Data Points - (x,y)  , (x1,y1), (x2,y2)
# 2. X-Axis Y-Axis - x usually input, y usually output
# 3. Figure - entire canvas - multiple graphs can exist in a figure
# 4. Axes - Graph box (small rectangular plot)
# 5. plot -
# 6. Marker - point which highlight data point ( . * etc)
# 7. Line style - ----, -.-.- , - - - - -
# 8. Color
# 9. Legend - box which determins what this color or line denote
# 10. Label - x-axis name and y-axis name
# 11. Title - graph name
# 12. Grid
# 13. Function - Block of code to perform specific task
# 14. Method -
# 15. Parameters
# 16. Keyward Arguments - Kwargs
# 17. Object Oriented api
# 18. DPI - Dots per inch - higher DPI - Higher Resolution
# 19. Backend

y = [23,21,23,45,13]
x = ['m','t','w','th','f']

plt.plot(x,y, color ='Red', linestyle = '--', linewidth= 2, marker = '*', label ='Sales Data')
plt.xlabel('Day of the week')
plt.ylabel('Sale')
plt.legend()
plt.grid()


plt.xticks([1,2,3,4],['M1','M2','M3','M4'])
plt.show()

# Bar chart - best for categorical data
# Pie Chart, Histogram

product = ['A','B', 'C', 'D']
sale = [200,300,400,250]


plt.bar(product, sale, color = 'orange', label = 'sale 2025')
plt.xlabel('Product Name')
plt.ylabel('Sale of product')
plt.legend()

# pie chart

Region = ['N','E','S','W']
Sale = [20000,30000,43000,23440]

plt.pie(sale, labels= Region, autopct= '%1.1f%%', colors = ['gold','coral','blue','red'])
plt.title('Revenue by Region')
plt.show()

# Histogram - Shows distribution of data

name = ['A','B', 'C', 'D','E','F','G']
Marks = [12,23,34,45,56,67,78,13,34,46,75,34,12,12,23,34,54,65,65,67,99,87,98,23,12,14,51,16,17,18,19]

plt.hist(Marks, bins = 5, color ='pink', edgecolor='black',label = 'Distribution of Marks')
plt.xlabel('Marks')
plt.ylabel('No. of Students')
plt.show()

# scatter plot -

hours = [1,2,3,4,5,6,7]
marks = [30,50,70,80,90,67,55]

hour1 = list(range(1,8,1))
marks1 = list(range(1,70,10))

plt.scatter(hours,marks, color = 'blue' ,marker='o', label = 'Class A')
plt.scatter(hour1, marks1, color = 'orange', marker='o', label = 'Class B')
plt.xlabel('hours')
plt.ylabel('marks')
plt.title('hour-marks correlation')
plt.legend()
plt.show()

# subplots

x = [1,2,3,4,5]
y = [10,20,15,30,25]

plt.subplot(1,2,1)
plt.bar(x,y)

plt.subplot(1,2,2)
plt.plot(x,y)

plt.tight_layout()
plt.show()

fig,ax = plt.subplots(1,2, figsize = (10,5))

x = [1,2,3,4]
y = [10,5,20,15]

ax[0].plot(x,y)
ax[0].set_title('Line Plot')

ax[1].bar(x,y)
ax[1].set_title('Bar Chart')

plt.suptitle('Line and Bar plot')

plt.tight_layout()


plt.savefig('first.png',dpi = 300, bbox_inches = 'tight')

plt.show()

# always use plt.show() after downloading image as memory is cleared after plt.show()

"""# **Seaborn**

"""

# importing seaborn library

import seaborn as sns

# we can get pre existing datasets for sns graphs

print(sns.get_dataset_names())

# sns.load_datase('datasetname') is used to load datasets
crash_df = sns.load_dataset('car_crashes')

crash_df.head(5)

## Histplot - Histogram

sns.histplot(crash_df['not_distracted'], kde = False, bins = 25)

plt.show()

#Jointplot

sns.jointplot(x= crash_df['speeding'], y=crash_df['alcohol'], kind = 'kde')

sns.jointplot(x= crash_df['speeding'], y=crash_df['alcohol'], kind = 'hex')

# Kde Plot - Kernel Density Estimate (KDE) plot is a method for visualizing the
# probability density of a continuous variable

sns.kdeplot(crash_df['alcohol'])

# Pairplot =  pairplot is a data visualization that plots pairwise
# relationships between variables in a dataset.
sns.pairplot(crash_df)

tips_df = sns.load_dataset('tips')

sns.pairplot(tips_df, hue = 'sex', palette = 'Blues')

# Rugplot

sns.rugplot(tips_df['tip'])

sns.set_style('ticks')

plt.figure(figsize = (12,6))

sns.set_context('paper', font_scale= 1.2)

sns.jointplot( x = 'speeding', y='alcohol', data = crash_df, kind = 'reg')

# Bar Plots

sns.barplot(x = 'sex', y = 'total_bill', data = tips_df, estimator = np.median)

# Count Plot

sns.countplot(x = tips_df['sex'])

# Box Plots

tips_df

sns.boxplot(x = tips_df['day'],y = tips_df['total_bill'] , hue = tips_df['sex'])

# Violin plot

sns.violinplot(x = 'day', y = 'total_bill', data = tips_df, hue = 'sex', split = True)

# Strip plot

plt.figure(figsize= (8,5))

sns.stripplot(x = 'day', y = 'total_bill', data = tips_df, hue = 'sex', jitter = True, dodge = True)

# Swarm Plot

sns.violinplot(x = 'day', y='total_bill', data = tips_df)
sns.swarmplot (x = 'day', y='total_bill', data = tips_df, color = 'white')

sns.set_style('white')
sns.set_context('talk')

## we can use any style, context or palette

sns.stripplot(x = 'day', y = 'total_bill', data = tips_df, hue = 'sex', palette = 'afmhot')
plt.legend(loc = 'upper right')

## Heatmap

plt.figure(figsize = (12,8))

sns.set_context('paper', font_scale= 1.2)

crash_mx = crash_df.corr() ## this is showing error as some columns are string

crash_numeric = crash_df.select_dtypes(include = 'number')

crash_mx = crash_numeric.corr()

sns.heatmap(crash_mx, annot=True, cmap='Blues')

flights = sns.load_dataset ('flights')

print(sns.get_dataset_names())

flight_df = flight_df.pivot_table(index='month', columns = 'year', values=  'passengers')


sns.heatmap(flight_df, cmap = 'Blues', linecolor = 'White', linewidth= 1 )

## Cluster Map

# iris_df = sns.load_dataset('iris')

# species = iris_df.pop('species')

# sns.clustermap(iris_df)


sns.clustermap(flight_df)

## Pair grid

iris_g = sns.PairGrid(iris_df)
iris_g.map(plt.scatter)

"""# **Customer Churn Analysis**"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt


df = pd.read_csv('/content/Customer Churn.csv')

df

df.describe()

df.info()

## i downloaded a wrong dataset but it was very unorganized so as practice
## cleaning the wrong dataset as well

demodf = pd.read_csv('/content/telco_churn.csv')

demodf.columns

demodf['SeniorCitizen'].unique().tolist()

demodf['SeniorCitizen'] = demodf['SeniorCitizen'].astype(str).str.lower().map({
    '0': False,
    '1': True,
})


demodf['SeniorCitizen'] =demodf['SeniorCitizen'].replace(np.nan, False)

demodf.columns

demodf['Partner'].unique()

## we're supposed to map every element not just only the wrong ones but the
## correct ones as well as it'll make the element nan if it isn't identified in
## map fucntion

demodf['Partner'] = demodf['Partner'].astype(str).str.lower().map({
    'No': False,
    'Yes': True
})

demodf['Dependents'].unique()

demodf['Dependents1'] = demodf['Dependents'].astype(str).str.lower().map({
    'false': False,
    'true': True,
    'no': False,
    'yes': True
})

demodf[['Dependents1', 'Dependents']]


demodf['Dependents'] = demodf['Dependents1']

demodf.drop(columns = ['Dependents1'], inplace = True)

demodf

## coming back to the project now

# checking the data
df.head(20)

# checking the shape
df.shape


# upon reading csv file we came to know that total charges column had some
# blank values which made it's dtype object so we replace them with 0

df['TotalCharges'] = df['TotalCharges'].replace(np.nan, '0')

# and convert the column to float
df['TotalCharges']= df['TotalCharges'].astype(float)

df.info()

# checking if there are any null values

df.isnull().sum()

# Also checking if there are any blank strings
(df == '').sum()

## describing the data
df.describe()

#checking duplicated

df.duplicated().sum()

df['customerID'].duplicated().sum()

## we are creating a function to convert 1 or 0 values to yes and no

def conv(value):
  if value == 1:
    return 'yes'
  else :
    return 'no'

# applying the function to the senior citizen column
df['SeniorCitizen'] = df['SeniorCitizen'].apply(conv)

## countplot

ax = sns.countplot(x = 'Churn', data = df)
plt.xlabel('Yes or No')
plt.ylabel('No of people')
plt.title('Count of Customers by Churn')
ax.bar_label(ax.containers[0])

# while plotting pie chart it couldn't convert yes and no to float so we instead
# use value_counts() to find the occurance of each value in the column.

counts = df['Churn'].value_counts()

plt.pie(counts, autopct = '%1.2f%%')
plt.axis('equal')
plt.title('Percentage of Churner Customers')

### we can see that 5174 which is 73.46% of total are the people have not churned
### and 1869 which is 26.54% of total are the customers who have churned out.

a1= sns.countplot(x = 'gender', data = df, hue = 'Churn')
a1.bar_label(a1.containers[0])
plt.tight_layout()
plt.title('Churning by gender')

df['Senior_label'] = df['SeniorCitizen'].map({
    'yes': 'Senior',
    'no': 'Not Senior'
})

a1 = sns.countplot(x = 'Senior_label', data=df,hue = 'Churn')
# a1.bar_label(a1.containers[0])

for container in a1.containers:
    a1.bar_label(container)



data = pd.crosstab(df['Senior_label'], df['Churn'])

ax = data.plot(kind='bar', stacked = True)

# df[['Churn','Senior_label']].value_counts()

plt.title('Churn by Senior Citizen Status')
plt.xlabel('Senior Citizen Status')
plt.ylabel('Count')
plt.legend(title='Churn')
plt.xticks(rotation=0)
for container in ax.containers:
    ax.bar_label(container,  label_type='center')

plt.show()

sns.histplot(x='tenure',data = df, bins = 50, hue = 'Churn', kde=True)

## people who have used services for longer tenure have not churned out much.

ax = sns.countplot(x=df['Contract'], data = df, hue = 'Churn')

for container in ax.containers:
  ax.bar_label(container)

## for the month to month contract -  churning rate is the highest

df.columns

columns = ['PhoneService', 'MultipleLines', 'InternetService','OnlineSecurity',
           'OnlineBackup', 'DeviceProtection', 'TechSupport',
           'StreamingTV', 'StreamingMovies']


fig, axes = plt.subplots(3,3, figsize =(12,9))

axes = axes.flatten()

for i , col in enumerate(columns):
  b= sns.countplot(x=col, data = df, ax = axes[i], hue='Churn')
  axes[i].set_title(f'Count Plot of {col}')
  axes[i].set_xlabel(col)
  axes[i].set_ylabel('Count')
  for container in b.containers:
     b.bar_label(container, label_type='center')

plt.tight_layout()

## Customers using Fiber Optics have higher churning rate
## Customers without Online Security have higher churning
## Customers without online backup have higher churning
## Customers without Device Protection have higher churning
## Customers without tech Support have higher churning
## Customers not using streaming services have higher churning

ax = sns.countplot(x = 'PaymentMethod', data = df, hue = 'Churn')
ax.bar_label(ax.containers[0], label_type='center')
ax.bar_label(ax.containers[1], label_type='center')
plt.xticks(rotation=45)
plt.show()

## customer is likely to churn if he is using electronic check as payment method.

"""# **Fin**"""